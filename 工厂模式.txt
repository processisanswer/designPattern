
为什么从设计模式开始及工厂模式详解

回顾软件设计原则
1 开闭原则
  对扩展开发，对修改关闭
2 单一职责原则
3 依赖倒置原则
4 接口隔离原则
5 迪米特法则——最少知道原则
6 里式替换原则
7 合成复用原则

为什么要学设计模式
优雅代码
重构系统
经典框架都在用设计模式解决问题

Spring中的设计模式
	工厂模式 BeanFactory
	装饰器模式 BeanWrapper
	代理模式 AopProxy
	单例模式 ApplicationContext
	委派模式 DispatcherServlet
	策略模式 HandlerMapping
	适配器模式 HandlerAdapter
	模板方法模式 JdbcTemplate
	观察者模式 ContextLoaderListener
---------------------------------------
Spring四大模块

IOC 工厂、单例、装饰器
AOP 代理、观察者
MVC 委派、适配器
JDBC 模板方法

-----------------------------
简单工厂模式
	由一个工厂对象决定创建出哪一种产品类的实例。
属于创建型模式，但它不属于GOF，23种设计模式。

	Calendar.getInstance()
	LoggerFactory.getLogger()

适用场景：
	负责创建的对象较少
	客户端只需要传入工厂类的参数，对于如何
	创建对象的逻辑不需要关心。
优点缺点
	创建时，只需要传入一个参数接口即可。
	违背开闭原则。不利于扩展复杂的产品
	
工厂方法模式
	指定义一个创建对象的接口，让实现
	这个接口的类来决定实例化哪个类，
	工厂方法让类的实例化推迟到子类中
	进行。
	单一职责原则、创建型模式
适用场景：
	优缺点：只关心产品对应的工厂
	        符合开闭原则，易扩展
		    类数量多，结构复杂
			增加了抽象性和理解难度
-------------------------
抽象工厂
	指提供一个创建一系列相关或相互依赖对象
	的接口，无须
	
	产品族
	产品等级结构

抽象工厂 不符合开闭原则
		 易于扩展

	将一个系列的产品族，统一到一个类中创建
	规定了产品集合，扩展困难
	增加了抽象性和立理解难度
























